<?php
/**
 * @file
 * Drupal Module: SharpSpring Contextual Blocks.
 *
 * Provides contextual content blocks that respond
 * to SharpSpring lead or contact fields.
 *
 * @author: mojiferous
 */

module_load_include('inc', 'ss_contextual_blocks', 'includes/ss_contextual_blocks.blocks');

/**
 * Implements hook_menu().
 */
function ss_contextual_blocks_menu() {
  $items['admin/config/system/sharpspring/blocks'] = array(
    'title' => 'Contextual Blocks',
    'description' => 'Configure SharpSpring contextual content blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_config_form'),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['sharpspring/contextual/block_callback/%'] = array(
    'title' => 'Return block contents',
    'description' => 'Returns the contents of a SharpSpring contextual block',
    'page callback' => 'ss_contextual_blocks_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/sharpspring/blocks/add'] = array(
    'title' => 'Add new SharpSpring contextual rule',
    'description' => 'Provides a form to add a new SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_add_rule_form'),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/delete/%'] = array(
    'title' => 'Delete SharpSpring contextual rule',
    'description' => 'Provides a form to confirm deletion of a SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_delete_rule_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/edit/%'] = array(
    'title' => 'Edit SharpSpring contextual rule',
    'description' => 'Provides a form to edit a SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_edit_rule_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/delete_block/%'] = array(
    'title' => 'Delete SharpSpring contextual block',
    'description' => 'Provides a form to confirm deletion of a SharpSpring contextual block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_delete_block_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Returns a drupal block depending on sharpspring block and segment.
 *
 * @param int $bid
 *   An integer indicating the internal sharpspring block id.
 */
function ss_contextual_blocks_callback($bid) {
  $ret_val = '';

  $rules = db_select('sharpspring_contextual_block_rules', 'sbd')
    ->fields('sbd')
    ->condition('ss_bid', $bid)
    ->execute()
    ->fetchAll();

  if (!empty($rules)) {
    $block_id = 0;

    foreach ($rules as $segment_rule) {
      if (!empty($segment_rule->segment_rule)) {
        $this_rule = json_decode($segment_rule->segment_rule);

        $passed_rule = TRUE;
        foreach ($this_rule as $rule_part) {
          if (isset($rule_part->fieldname) && isset($rule_part->value)) {
            if (!isset($_POST[$rule_part->fieldname]) || $_POST[$rule_part->fieldname] != $rule_part->value) {
              // This rule failed, so we set $passed_rule to FALSE;
              $passed_rule = FALSE;
            }
          }
        }

        if ($passed_rule) {
          $block_id = (!empty($segment_rule->block_id)) ? $segment_rule->block_id : 0;
        }

      }
    }

    if (!empty($block_id)) {
      $block_info = db_select('block', 'b')
        ->fields('b', array('module', 'delta', 'title'))
        ->condition('bid', $block_id)
        ->execute()
        ->fetchAssoc();

      if (!empty($block_info['module']) && !empty($block_info['delta'])) {
        switch ($block_info['module']) {
          case 'block':
            $block = block_load('block', $block_info['delta']);
            $render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
            $ret_val = drupal_render($render_array);
            break;

          default:
            $block = module_invoke($block_info['module'], 'block_view', $block_info['delta']);
            if (!empty($block['content'])) {
              $ret_val = render($block['content']);
            }
            break;
        }
      }
    }

  }

  drupal_json_output($ret_val);
}

/**
 * Helper function to return all SS Contextual Blocks keyed by block id.
 *
 * This function returns blocks that are available within the
 * standard Drupal block system. The contents are defined elsewhere.
 *
 * @return array
 *   Returns array keyed by block id, values are block names.
 */
function _ss_contextual_blocks_return_all_drupal_blocks() {
  if (db_table_exists('sharpspring_contextual_blocks')) {
    $ss_blocks = db_select('sharpspring_contextual_blocks', 'scb')
      ->fields('scb')
      ->execute()
      ->fetchAllKeyed();
  }
  else {
    $ss_blocks = array();
  }

  return $ss_blocks;
}

/**
 * Helper function to return SharpSpring contextual rules.
 *
 * @return array
 *   Returns array of block contexts keyed by ss block id.
 */
function _ss_contextual_blocks_return_all_ss_rules() {
  $ret_val = array();

  $ss_blocks = db_select('sharpspring_contextual_block_rules', 'sbr');
  $ss_blocks->join('sharpspring_contextual_blocks', 'scb', 'sbr.ss_bid = scb.ss_bid');
  $ss_blocks
    ->fields('sbr',
      array(
        'ss_bid',
        'segment_rule',
        'block_id',
        'data_id',
        'weight',
        'machine_name',
      )
    )
    ->fields('scb', array('name'))
    ->orderBy('sbr.weight');

  $result = $ss_blocks->execute()->fetchAll();

  foreach ($result as $block_info) {
    if (!empty($block_info->ss_bid) && !empty($block_info->segment_rule) && !empty($block_info->block_id) && !empty($block_info->name) && !empty($block_info->data_id) && isset($block_info->weight) && !empty($block_info->machine_name)) {
      $ret_val[] = array(
        'ss_bid' => $block_info->ss_bid,
        'block_id' => $block_info->block_id,
        'block_name' => $block_info->name,
        'machine_name' => $block_info->machine_name,
        'data_id' => $block_info->data_id,
        'weight' => $block_info->weight,
        'rules' => json_decode($block_info->segment_rule, TRUE),
      );
    }
  }

  return $ret_val;
}

/**
 * Updates a SS contextual block rule.
 *
 * @param int $ss_bid
 *   Integer value of SharpSpring block.
 * @param string $rules
 *   JSON encoded SharpSpring rules.
 * @param int $block_id
 *   Integer value of drupal block.
 * @param int $data_id
 *   Unique integer ID of the rule
 *
 * @throws \Exception
 */
function _ss_contextual_blocks_update_rule($ss_bid, $rules, $block_id, $data_id) {
  db_update('sharpspring_contextual_block_rules')
    ->fields(array(
      'block_id' => $block_id,
      'segment_rule' => $rules,
      'ss_bid' => $ss_bid,
    ))
    ->condition('data_id', $data_id)
    ->execute();
}

/**
 * Inserts a new SharpSpring contextual rule.
 *
 * @param int $ss_bid
 *   Integer ID of SharpSpring block.
 * @param string $rules
 *   JSON encoded SharpSpring rules.
 * @param int $block_id
 *   Drupal block ID.
 * @param string $machine_name
 *   Unique machine name of the rule.
 */
function _ss_contextual_blocks_insert_rule($ss_bid, $rules, $block_id, $machine_name) {
  db_insert('sharpspring_contextual_block_rules')
    ->fields(array(
      'ss_bid' => $ss_bid,
      'segment_rule' => $rules,
      'block_id' => $block_id,
      'machine_name' => $machine_name,
    ))
    ->execute();
}

/**
 * Returns rule fields for a passed unique data_id.
 *
 * @param int $data_id
 *   Unique ID of the rule.
 *
 * @return array
 *   Associative array of field values for the passed rule.
 */
function _ss_contextual_blocks_return_rule_from_data_id($data_id) {
  $ret_val = array();

  if (is_numeric($data_id)) {
    $ret_val = db_select('sharpspring_contextual_block_rules', 'sbr')
      ->fields('sbr')
      ->condition('data_id', $data_id)
      ->execute()
      ->fetchAssoc();
  }

  return $ret_val;
}

/**
 * Updates a contextual block rule weight.
 *
 * @param int $data_id
 *   Integer of internal rule ID.
 * @param int $weight
 *   Integer Value of new rule weight.
 */
function _ss_contextual_blocks_update_rule_weight($data_id, $weight) {
  db_update('sharpspring_contextual_block_rules')
    ->fields(array(
      'weight' => $weight,
    ))
    ->condition('data_id', $data_id)
    ->execute();

}

/**
 * Validates SharpSpring rule machine names, checks for duplicates.
 *
 * @param string $machine_name
 *   String passed from the rule name field.
 *
 * @return bool
 *   Returns true if the machine name is already in use.
 */
function _ss_contextual_block_rule_name_exists($machine_name) {
  $exists = db_select('sharpspring_contextual_block_rules', 'sbr')
    ->fields('sbr')
    ->condition('machine_name', $machine_name)
    ->execute()
    ->fetchCol();

  return !empty($exists);
}

/**
 * Returns an associative array of blocks keyed by block ID.
 *
 * @return array
 *   Associative array of drupal blocks.
 */
function _ss_contextual_block_get_all_blocks() {
  $ret_blocks = array();

  global $theme;
  $def_theme = variable_get('theme_default', $theme);
  $blocks = db_select('block', 'b')
    ->fields('b', array('bid', 'delta', 'title', 'module'))
    ->condition('theme', $def_theme)
    ->execute()
    ->fetchAll();

  foreach ($blocks as $block) {
    if (!empty($block->bid) && isset($block->module)) {
      switch ($block->module) {
        case 'ss_contextual_blocks':
          // Do not add any of our own blocks.
          break;

        case 'webform':
          // Get the node ID from delta.
          $nid = drupal_substr($block->delta, strrpos($block->delta, '-') + 1);
          $node = node_load($nid);
          if (node_access('view', $node) && isset($node->title)) {
            $ret_blocks[$block->bid] = $node->title;
          }
          break;

        case 'views':
          $view_name = explode('-', $block->delta);
          $ret_blocks[$block->bid] = (!empty($view_name[0])) ? $view_name[0] : $block->delta;
          break;

        default:
          $ret_blocks[$block->bid] = (!empty($block->title)) ? $block->title : ((!empty($block->delta)) ? $block->delta : '');
          break;
      }
    }
  }

  return $ret_blocks;
}
