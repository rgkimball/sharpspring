<?php
/**
 * @file
 * Drupal Module: SharpSpring Contextual Blocks.
 *
 * Provides contextual content blocks that respond
 * to SharpSpring lead or contact fields.
 *
 */

module_load_include('inc', 'ss_contextual_blocks', 'includes/ss_contextual_blocks.blocks');

/**
 * Implements hook_menu().
 */
function ss_contextual_blocks_menu() {
  $items['admin/config/system/sharpspring/blocks'] = array(
    'title' => 'Contextual Blocks',
    'description' => 'Configure SharpSpring contextual content blocks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_config_form'),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['sharpspring/contextual/block_callback/%'] = array(
    'title' => 'Return block contents',
    'description' => 'Returns the contents of a SharpSpring contextual block',
    'page callback' => 'ss_contextual_blocks_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/sharpspring/blocks/add_rule'] = array(
    'title' => 'Add new SharpSpring contextual rule',
    'description' => 'Provides a form to add a new SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_add_rule_form'),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/delete_rule/%'] = array(
    'title' => 'Delete SharpSpring contextual rule',
    'description' => 'Provides a form to confirm deletion of a SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_delete_rule_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/edit_rule/%'] = array(
    'title' => 'Edit SharpSpring contextual rule',
    'description' => 'Provides a form to edit a SharpSpring contextual rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_edit_rule_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/add_block'] = array(
    'title' => 'Add new SharpSpring contextual block',
    'description' => 'Provides a form to add a new SharpSpring contextual block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_add_block_form'),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/delete_block/%'] = array(
    'title' => 'Delete SharpSpring contextual block',
    'description' => 'Provides a form to confirm deletion of a SharpSpring contextual block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_delete_block_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/sharpspring/blocks/edit_block/%'] = array(
    'title' => 'Edit SharpSpring contextual block',
    'description' => 'Provides a form to edit a SharpSpring contextual block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ss_contextual_blocks_edit_block_form', 6),
    'access arguments' => array('administer sharpspring'),
    'file' => 'includes/ss_contextual_blocks.crud_forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Returns a drupal block depending on sharpspring block and segment.
 *
 * @param int $ss_bid
 *   An integer indicating the internal sharpspring block id.
 */
function ss_contextual_blocks_callback($ss_bid) {
  $ret_val = '';

  $rules = db_select('sharpspring_contextual_block_rules', 'sbd')
    ->fields('sbd')
    ->orderBy('weight')
    ->execute()
    ->fetchAll();

  // Load all of our rules and check which one passes.
  // This is the rule_id we will use.
  if (!empty($rules)) {
    $rule_id = 0;

    foreach ($rules as $segment_rule) {
      if (!empty($segment_rule->segment_rule)) {
        $this_rule = json_decode($segment_rule->segment_rule);
        $and_or = (!empty($this_rule->and_or)) ? $this_rule->and_or : 'and';
        $processed_rules = (!empty($this_rule->rules)) ? $this_rule->rules : array();

        // OR starts with the test as false.
        // Then passes when one rule has passed.
        // AND starts as true and fails when one fails.
        $passed_rule = ($and_or == 'or') ? FALSE : TRUE;
        foreach ($processed_rules as $rule_part) {
          if (isset($rule_part->fieldname) && isset($rule_part->value)) {
            if ($and_or == 'or') {
              // Any passed rule will make this true.
              if (isset($_POST[$rule_part->fieldname]) && $_POST[$rule_part->fieldname] == $rule_part->value) {
                $passed_rule = TRUE;
              }
            }
            else {
              if (!isset($_POST[$rule_part->fieldname]) || $_POST[$rule_part->fieldname] != $rule_part->value) {
                // This rule failed, so we set $passed_rule to FALSE;
                $passed_rule = FALSE;
              }
            }
          }
        }

        if ($passed_rule) {
          $rule_id = (!empty($segment_rule->rule_id)) ? $segment_rule->rule_id : 0;
        }

      }
    }

    $drupal_block = db_select('sharpspring_contextual_block_reactions', 'sbr')
      ->fields('sbr')
      ->condition('rule_id', $rule_id)
      ->condition('ss_bid', $ss_bid)
      ->execute()
      ->fetchAssoc();

    if (isset($drupal_block['bid']) && $drupal_block['bid'] == -1) {
      // The user has selected 'none' as the content here.
    }
    else {
      if (isset($drupal_block['bid']) && $drupal_block['bid'] == 0) {
        // The user has selected 'default' as the content.
        // Load the default rule for this SS block.

        $drupal_block = db_select('sharpspring_contextual_block_reactions', 'sbr')
          ->fields('sbr')
          ->condition('rule_id', 0)
          ->condition('ss_bid', $ss_bid)
          ->execute()
          ->fetchAssoc();

      }

      if (!empty($drupal_block['bid']) && $drupal_block['bid'] != -1) {
        // One last check for empty content.
        $block_info = db_select('block', 'b')
          ->fields('b', array('module', 'delta', 'title'))
          ->condition('bid', $drupal_block['bid'])
          ->execute()
          ->fetchAssoc();

        if (!empty($block_info['module']) && !empty($block_info['delta'])) {
          switch ($block_info['module']) {
            case 'block':
              $block = block_load('block', $block_info['delta']);
              $render_array = _block_get_renderable_array(_block_render_blocks(array($block)));
              $ret_val = drupal_render($render_array);
              break;

            default:
              $block = module_invoke($block_info['module'], 'block_view', $block_info['delta']);
              if (!empty($block['content'])) {
                $ret_val = render($block['content']);
              }
              break;
          }
        }
      }

    }

  }

  drupal_json_output($ret_val);
}

/**
 * Helper function to return all SS Contextual Blocks keyed by block id.
 *
 * This function returns blocks that are available within the
 * standard Drupal block system. The contents are defined elsewhere.
 *
 * @return array
 *   Returns array keyed by block id, values is an object of field values.
 */
function _ss_contextual_blocks_return_all_drupal_blocks() {
  if (db_table_exists('sharpspring_contextual_blocks')) {
    $ss_blocks = db_select('sharpspring_contextual_blocks', 'scb')
      ->fields('scb')
      ->execute()
      ->fetchAllAssoc('ss_bid');
  }
  else {
    $ss_blocks = array();
  }

  return $ss_blocks;
}

/**
 * Helper function to return SharpSpring contextual rules.
 *
 * @return array
 *   Returns array of rules.
 */
function _ss_contextual_blocks_return_all_ss_rules() {
  $ret_val = array();

  $rules = db_select('sharpspring_contextual_block_rules', 'sbr')
    ->fields('sbr')
    ->execute()
    ->fetchAll();

  foreach ($rules as $rule) {
    if (!empty($rule->rule_id) && !empty($rule->segment_rule) && isset($rule->description) && isset($rule->name) && isset($rule->weight)) {
      $ret_val[] = array(
        'rule_id' => $rule->rule_id,
        'name' => $rule->name,
        'description' => $rule->description,
        'weight' => $rule->weight,
        'rules' => json_decode($rule->segment_rule, TRUE),
      );
    }
  }

  return $ret_val;
}

/**
 * Updates a SS contextual block rule.
 *
 * @param int $rule_id
 *   Unique integer ID of the rule.
 * @param string $rules
 *   JSON encoded SharpSpring rules.
 * @param string $name
 *   Name of the rule.
 * @param string $description
 *   Description of the rule.
 */
function _ss_contextual_blocks_update_rule($rule_id, $rules, $name, $description) {
  if (is_numeric($rule_id)) {
    db_update('sharpspring_contextual_block_rules')
      ->fields(array(
        'segment_rule' => $rules,
        'name' => $name,
        'description' => $description,
      ))
      ->condition('rule_id', $rule_id)
      ->execute();
  }
}

/**
 * Updates a SharpSpring contextual block.
 *
 * @param int $ss_bid
 *   Integer value of SharpSpring block ID.
 * @param string $name
 *   Name of the SharpSpring block.
 * @param string $description
 *   Description of the SharpSpring block.
 * @param array $reactions
 *   Array of block reactions.
 */
function _ss_contextual_blocks_update_block($ss_bid, $name, $description, $reactions) {
  if (is_numeric($ss_bid)) {
    db_update('sharpspring_contextual_blocks')
      ->fields(array(
        'name' => $name,
        'description' => $description,
      ))
      ->condition('ss_bid', $ss_bid)
      ->execute();

    // Clear all existing block reactions.
    db_delete('sharpspring_contextual_block_reactions')
      ->condition('ss_bid', $ss_bid)
      ->execute();

    foreach ($reactions as $rule_id => $reaction) {
      if (isset($reaction['react_rule']) && is_numeric($reaction['react_rule'])) {
        db_insert('sharpspring_contextual_block_reactions')
          ->fields(array(
            'rule_id' => $rule_id,
            'ss_bid' => $ss_bid,
            'bid' => $reaction['react_rule'],
          ))
          ->execute();
      }
    }

  }

}

/**
 * Inserts a new SharpSpring contextual rule.
 *
 * @param string $rules
 *   JSON encoded SharpSpring rules.
 * @param string $name
 *   Name of the rule.
 * @param string $description
 *   Description of the rule's function.
 *
 * @return int
 *   Returns id of new rule.
 */
function _ss_contextual_blocks_insert_rule($rules, $name, $description) {
  $new_id = db_insert('sharpspring_contextual_block_rules')
    ->fields(array(
      'segment_rule' => $rules,
      'name' => $name,
      'description' => $description,
    ))
    ->execute();

  return $new_id;
}

/**
 * Inserts a new SharpSpring block.
 *
 * @param string $name
 *   Name of the new SharpSpring block.
 * @param string $description
 *   Description of the SharpSpring block.
 * @param array $reactions
 *   Associative array of block reactions.
 *
 * @return int
 *   Returns the inserted block id.
 */
function _ss_contextual_blocks_insert_block($name, $description, $reactions) {
  $new_bid = db_insert('sharpspring_contextual_blocks')
    ->fields(array(
      'name' => $name,
      'description' => $description,
    ))
    ->execute();

  if (!empty($new_bid)) {
    foreach ($reactions as $rule_id => $reaction) {
      if (isset($reaction['react_rule']) && is_numeric($reaction['react_rule'])) {
        db_insert('sharpspring_contextual_block_reactions')
          ->fields(array(
            'rule_id' => $rule_id,
            'ss_bid' => $new_bid,
            'bid' => $reaction['react_rule'],
          ))
          ->execute();
      }
    }
  }

  return $new_bid;
}

/**
 * Returns rule fields for a passed unique rule_id.
 *
 * @param int $rule_id
 *   Unique ID of the rule.
 *
 * @return array
 *   Associative array of field values for the passed rule.
 */
function _ss_contextual_blocks_return_rule_from_data_id($rule_id) {
  $ret_val = array();

  if (is_numeric($rule_id)) {
    $ret_val = db_select('sharpspring_contextual_block_rules', 'sbr')
      ->fields('sbr')
      ->condition('rule_id', $rule_id)
      ->execute()
      ->fetchAssoc();
  }

  return $ret_val;
}

/**
 * Returns block fields for a passed unique ss_bid.
 *
 * @param int $ss_bid
 *   SharpSpring block ID.
 *
 * @return array
 *   Associative array of field values for the passed block.
 */
function _ss_contextual_blocks_return_block_from_block_id($ss_bid) {
  $ret_val = array();

  if (is_numeric($ss_bid)) {
    $ret_val = db_select('sharpspring_contextual_blocks', 'scb')
      ->fields('scb')
      ->condition('ss_bid', $ss_bid)
      ->execute()
      ->fetchAssoc();
  }

  return $ret_val;
}

/**
 * Returns reactions for a passed block id.
 *
 * @param int $ss_bid
 *   SharpSpring block id.
 *
 * @return array
 *   Associative array of reactions for the passed block.
 */
function _ss_contextual_blocks_return_reactions_from_block_id($ss_bid) {
  $ret_val = array();

  if (is_numeric($ss_bid)) {
    $ret_val = db_select('sharpspring_contextual_block_reactions', 'sreac')
      ->fields('sreac')
      ->condition('ss_bid', $ss_bid)
      ->execute()
      ->fetchAllAssoc('rule_id');
  }

  return $ret_val;
}

/**
 * Updates a contextual block rule weight.
 *
 * @param int $data_id
 *   Integer of internal rule ID.
 * @param int $weight
 *   Integer Value of new rule weight.
 */
function _ss_contextual_blocks_update_rule_weight($data_id, $weight) {
  db_update('sharpspring_contextual_block_rules')
    ->fields(array(
      'weight' => $weight,
    ))
    ->condition('rule_id', $data_id)
    ->execute();

}

/**
 * Validates SharpSpring rule machine names, checks for duplicates.
 *
 * @param string $machine_name
 *   String passed from the rule name field.
 *
 * @return bool
 *   Returns true if the machine name is already in use.
 */
function _ss_contextual_block_rule_name_exists($machine_name) {
  $exists = db_select('sharpspring_contextual_block_rules', 'sbr')
    ->fields('sbr')
    ->condition('machine_name', $machine_name)
    ->execute()
    ->fetchCol();

  return !empty($exists);
}

/**
 * Returns an associative array of blocks keyed by block ID.
 *
 * @return array
 *   Associative array of drupal blocks.
 */
function _ss_contextual_block_get_all_blocks() {
  $ret_blocks = array();

  global $theme;
  $def_theme = variable_get('theme_default', $theme);
  $blocks = db_select('block', 'b')
    ->fields('b', array('bid', 'delta', 'title', 'module'))
    ->condition('theme', $def_theme)
    ->execute()
    ->fetchAll();

  foreach ($blocks as $block) {
    if (!empty($block->bid) && isset($block->module)) {
      switch ($block->module) {
        case 'ss_contextual_blocks':
          // Do not add any of our own blocks.
          break;

        case 'webform':
          // Get the node ID from delta.
          $nid = drupal_substr($block->delta, strrpos($block->delta, '-') + 1);
          $node = node_load($nid);
          if (node_access('view', $node) && isset($node->title)) {
            $ret_blocks[$block->bid] = $node->title;
          }
          break;

        case 'views':
          $view_name = explode('-', $block->delta);
          $ret_blocks[$block->bid] = (!empty($view_name[0])) ? $view_name[0] : $block->delta;
          break;

        default:
          $ret_blocks[$block->bid] = (!empty($block->title)) ? $block->title : ((!empty($block->delta)) ? $block->delta : '');
          break;
      }
    }
  }

  return $ret_blocks;
}
